{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/index.ts"],
  "sourcesContent": ["var scriptsClassname = 'app-scripts'\r\n\r\n/**\r\n * This will replace the content fetched from `path` into `selector`.\r\n * The content is assumed to not be an entire html page but a chunk of it.\r\n */\r\nexport function renderContent(\r\n\tcontent: string,\r\n\tselector = window.PineconeRouter.settings.viewSelector ?? '#app'\r\n) {\r\n\t// create view placeholder from fetched content\r\n\tvar view = document.createElement('div')\r\n\tview.innerHTML = content;\r\n\r\n\t// remove all previous view scripts\r\n\tdocument.querySelectorAll('.' + scriptsClassname).forEach(script => script.remove())\r\n\t// insert all new view scripts \r\n\tview.querySelectorAll('script').forEach(script => {\r\n\t\tscript.remove()\r\n\t\tvar scriptClone = document.createElement('script')\r\n\t\tscriptClone.className = scriptsClassname\r\n\t\tscriptClone.textContent = script.textContent\r\n\t\tdocument.body.appendChild(scriptClone)\r\n\t})\r\n\r\n\t// replace previous view content with the fetched content\r\n\tdocument.querySelector(selector)!.replaceChildren(...Array.from(view.childNodes))\r\n\t// @ts-ignore\r\n\tdocument.querySelector('[autofocus]')?.focus()\r\n}\r\n", "import { renderContent } from './utils'\r\n\r\nconst PineconeRouterMiddleware = {\r\n    /**\r\n     * @property {string} version the version of this middleware.\r\n     */\r\n    version: '2.0.1',\r\n    /**\r\n     * @property {string} name the name of the middleware.\r\n     */\r\n    name: 'views',\r\n    /**\r\n     * Called for each route during initialization,\r\n     * after the route is processed & added.\r\n     * @param {Element} el the route's <template> element\r\n     * @param {string} path the route's path\r\n     */\r\n    onAfterRouteProcessed(el, path) {\r\n        if (!el.hasAttribute('x-view')) return\r\n        let view = el.getAttribute('x-view')\r\n        if (path == 'notfound') {\r\n            window.PineconeRouter.notfound.view = view\r\n            return\r\n        }\r\n        // add handlers to the route\r\n        let i = window.PineconeRouter.routes.findIndex((r) => r.path == path)\r\n        window.PineconeRouter.routes[i].view = view\r\n    },\r\n    /**\r\n     * Will be called before the handlers are executed and done.\r\n     * during navigation (PineconeRouter.navigate()).\r\n     * @param {object} route the matched route, undefined if not found.\r\n     * @param {string} path the path visited by the client\r\n     * @param {boolean} firstload first page load and not link navigation request\r\n     * @returns {string|null} 'stop' to make the navigate function exit (make sure to send the loadend event); none to continute execution.\r\n     */\r\n    onBeforeHandlersExecuted(route, path, firstload) {\r\n        window.dispatchEvent(window.PineconeRouter.loadStart)\r\n    },\r\n\r\n    /**\r\n     * Will be called after the handlers are executed and done.\r\n     * during navigation (PineconeRouter.navigate()).\r\n     * @param {object} route the matched route, undefined if not found.\r\n     * @param {string} path the path visited by the client\r\n     * @param {boolean} firstload first page load and not link navigation request\r\n     * @returns {string|null} 'stop' to make the navigate function exit (make sure to send the loadend event); none to continute execution.\r\n     */\r\n    onHandlersExecuted(route, path, firstload) {\r\n        let view: string = !route\r\n            ? window.PineconeRouter.notfound.view\r\n            : route.view\r\n                ? route.view\r\n                : ''\r\n        if (!view) {\r\n            window.dispatchEvent(window.PineconeRouter.loadEnd)\r\n            return\r\n        }\r\n        if (window.PineconeRouter.viewCache[view]) {\r\n            renderContent(window.PineconeRouter.viewCache[view])\r\n            window.dispatchEvent(window.PineconeRouter.loadEnd)\r\n        }\r\n        fetch(view)\r\n            .then((response) => {\r\n                return response.text()\r\n            })\r\n            .then((response) => {\r\n                renderContent(response)\r\n                window.PineconeRouter.viewCache[view] = response\r\n                window.dispatchEvent(window.PineconeRouter.loadEnd)\r\n                return false\r\n            })\r\n            .catch((error) => {\r\n                document\r\n                    .querySelector(\r\n                        window.PineconeRouter.settings.viewSelector ?? '#app'\r\n                    )!\r\n                    .dispatchEvent(\r\n                        new CustomEvent('fetch-error', { detail: error })\r\n                    )\r\n                console.error(`Pinecone Router: Fetch Error: ${error}`)\r\n            })\r\n    },\r\n}\r\n\r\nif (window.PineconeRouterMiddlewares == null)\r\n    window.PineconeRouterMiddlewares = [PineconeRouterMiddleware]\r\nelse window.PineconeRouterMiddlewares.push(PineconeRouterMiddleware)\r\n"],
  "mappings": "MAAA,IAAIA,EAAmB,cAMhB,SAASC,EACfC,EACAC,EAAW,OAAO,eAAe,SAAS,cAAgB,OACzD,CAED,IAAIC,EAAO,SAAS,cAAc,KAAK,EACvCA,EAAK,UAAYF,EAGjB,SAAS,iBAAiB,IAAMF,CAAgB,EAAE,QAAQK,GAAUA,EAAO,OAAO,CAAC,EAEnFD,EAAK,iBAAiB,QAAQ,EAAE,QAAQC,GAAU,CACjDA,EAAO,OAAO,EACd,IAAIC,EAAc,SAAS,cAAc,QAAQ,EACjDA,EAAY,UAAYN,EACxBM,EAAY,YAAcD,EAAO,YACjC,SAAS,KAAK,YAAYC,CAAW,CACtC,CAAC,EAGD,SAAS,cAAcH,CAAQ,EAAG,gBAAgB,GAAG,MAAM,KAAKC,EAAK,UAAU,CAAC,EAEhF,SAAS,cAAc,aAAa,GAAG,MAAM,CAC9C,CC3BA,IAAMG,EAA2B,CAI7B,QAAS,QAIT,KAAM,QAON,sBAAsBC,EAAIC,EAAM,CAC5B,GAAI,CAACD,EAAG,aAAa,QAAQ,EAAG,OAChC,IAAIE,EAAOF,EAAG,aAAa,QAAQ,EACnC,GAAIC,GAAQ,WAAY,CACpB,OAAO,eAAe,SAAS,KAAOC,EACtC,MACJ,CAEA,IAAIC,EAAI,OAAO,eAAe,OAAO,UAAWC,GAAMA,EAAE,MAAQH,CAAI,EACpE,OAAO,eAAe,OAAOE,GAAG,KAAOD,CAC3C,EASA,yBAAyBG,EAAOJ,EAAMK,EAAW,CAC7C,OAAO,cAAc,OAAO,eAAe,SAAS,CACxD,EAUA,mBAAmBD,EAAOJ,EAAMK,EAAW,CACvC,IAAIJ,EAAgBG,EAEdA,EAAM,KACFA,EAAM,KACN,GAHJ,OAAO,eAAe,SAAS,KAIrC,GAAI,CAACH,EAAM,CACP,OAAO,cAAc,OAAO,eAAe,OAAO,EAClD,MACJ,CACI,OAAO,eAAe,UAAUA,KAChCK,EAAc,OAAO,eAAe,UAAUL,EAAK,EACnD,OAAO,cAAc,OAAO,eAAe,OAAO,GAEtD,MAAMA,CAAI,EACL,KAAMM,GACIA,EAAS,KAAK,CACxB,EACA,KAAMA,IACHD,EAAcC,CAAQ,EACtB,OAAO,eAAe,UAAUN,GAAQM,EACxC,OAAO,cAAc,OAAO,eAAe,OAAO,EAC3C,GACV,EACA,MAAOC,GAAU,CACd,SACK,cACG,OAAO,eAAe,SAAS,cAAgB,MACnD,EACC,cACG,IAAI,YAAY,cAAe,CAAE,OAAQA,CAAM,CAAC,CACpD,EACJ,QAAQ,MAAM,iCAAiCA,GAAO,CAC1D,CAAC,CACT,CACJ,EAEI,OAAO,2BAA6B,KACpC,OAAO,0BAA4B,CAACV,CAAwB,EAC3D,OAAO,0BAA0B,KAAKA,CAAwB",
  "names": ["scriptsClassname", "renderContent", "content", "selector", "view", "script", "scriptClone", "PineconeRouterMiddleware", "el", "path", "view", "i", "r", "route", "firstload", "renderContent", "response", "error"]
}
